<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.grepp.team07.app.model.ordered.OrderedRepository">

    <resultMap id="orderedMap" type="OrderedDto">
        <id property="orderId" column="order_id"/>
        <result property="cartId" column="cart_id"/>
        <result property="email" column="email"/>
        <result property="address" column="address"/>
        <result property="orderedAt" column="ordered_at"/>
        <result property="totalPrice" column="total_price"/>
        <result property="status" column="status" javaType="com.grepp.team07.app.model.delivery.code.DeliveryState"/>
        <result property="deliveredAt" column="delivered_at"/>
        <collection property="orderedProducts" ofType="OrderedProductDto"
                    column="order_id" select="selectOrderProductByOrderId"/>
    </resultMap>

    <select id="selectAll" resultMap="orderedMap">
        select *
        from ordered o
        left join
        delivery d on o.order_id = d.order_id
    </select>

    <select id="findPaged" resultMap="orderedMap" parameterType="map">
        select o.order_id, o.cart_id, o.email, o.address, o.ordered_at,
        d.status, d.delivered_at
        from ordered o
        left join delivery d ON o.order_id = d.order_id
        order by o.ordered_at DESC
        limit #{limit} offset #{offset}
    </select>

    <select id="countAllOrders" resultType="int">
        SELECT COUNT(*) FROM ordered
    </select>

    <select id="selectOrderProductByOrderId" parameterType="int"
            resultType="OrderedProductDto">
        select *
        from order_product op
        join product p on op.product_id = p.product_id
        where order_id = #{orderId}
    </select>

    <select id="searchByEmail" resultMap="orderedMap" parameterType="map">
        select *
        from ordered o
        left join delivery d ON o.order_id = d.order_id
        where o.email = #{email} and o.is_customer is false
        order by o.ordered_at DESC
        limit #{limit} offset #{offset}
    </select>
    <select id="countEmailOrders" resultType="int">
        select count(*)
        from ordered
        where email = #{email} and is_customer is false
    </select>

    <select id="searchByMemberEmail" resultMap="orderedMap" parameterType="map">
        select *
        from ordered o
        left join delivery d ON o.order_id = d.order_id
        where o.email = #{email} and o.is_customer is true
        order by o.ordered_at DESC
        limit #{limit} offset #{offset}
    </select>
    <select id="countMemberEmailOrders" resultType="int">
        select count(*)
        from ordered
        where email = #{email} and is_customer is true
    </select>

    <insert id="insertMemberOrder">
        insert into ordered (cart_id, email, is_customer, address, post_code, total_price)
        values (
        (select c.cart_id
        from cart c
        join customer cu on c.customer_id = cu.id
        where cu.user_id = #{userId}
        and c.is_activated = true),
        #{email},
        true,
        #{address},
        #{postCode},
        (select sum(p.price * cp.count)
        from cart_product cp
        join cart c on cp.cart_id = c.cart_id
        join product p on cp.product_id = p.product_id
        join customer cu on c.customer_id = cu.id
        where cu.user_id = #{userId}
        and c.is_activated = true)
        )
    </insert>

    <insert id="insertGuestOrder">
        insert into ordered (email, is_customer, address, post_code, total_price)
        values (#{email}, false, #{address}, #{postCode}, 0)
    </insert>

    <select id="findLastOrderId" resultType="int">
        select last_insert_id()
    </select>

    <select id="findProductPrice" parameterType="int" resultType="int">
        select price
        from product
        where product_id = #{productId}
    </select>

    <insert id="insertOrderProducts">
        insert into order_product (order_id, product_id, count)
        values (#{orderId}, #{productId}, #{count})
    </insert>

    <update id="updateOrderTotalPrice">
        update ordered
        set total_price = #{totalPrice}
        where order_id = #{orderId}
    </update>

    <select id="findCartProductByUserId" resultType="map">
        select cp.product_id, cp.count
        from cart_product cp
        join cart c on cp.cart_id = c.cart_id
        join customer cu on c.customer_id = cu.id
        where cu.user_id = #{userId}
        and c.is_activated = true
    </select>

</mapper>
